let ApolloServer,express,typeDefs,resolvers,APP_PORT,NODE_ENV,DB_USER,DB_PASSWORD,DB_NAME,IN_PROD;_01d‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_01d‍.w("express",[["default",["express"],function(v){express=v}]]);_01d‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_01d‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_01d‍.w("./config",[["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["NODE_ENV",["NODE_ENV"],function(v){NODE_ENV=v}],["DB_USER",["DB_USER"],function(v){DB_USER=v}],["DB_PASSWORD",["DB_PASSWORD"],function(v){DB_PASSWORD=v}],["DB_NAME",["DB_NAME"],function(v){DB_NAME=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}]]);



   

var mongoose = require('mongoose');
const app = express();

app.disable('X-powered-by');

(async()=>{
    try{
        mongoose.connect(`mongodb://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}`,{useNewUrlParser: true});

        const server = new ApolloServer({
            typeDefs,
            resolvers,
            playground: !IN_PROD
        })
        
        server.applyMiddleware({ app });
        
        
        app.listen({port: APP_PORT},()=>console.log(`http:localhost:${APP_PORT}${server.graphqlPath}`))
    }
    catch(e ){_01d‍.g.console.error(e)}
})()