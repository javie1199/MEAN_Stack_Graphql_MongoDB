let mongoose,user,hash,uniqueValidator;_2bf‍.x([["default",()=>_2bf‍.o]]);_2bf‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_2bf‍.w("../typeDefs/user",[["default",["user"],function(v){user=v}]]);_2bf‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}]]);_2bf‍.w("mongoose-unique-validator",[["default",["uniqueValidator"],function(v){uniqueValidator=v}]]);

let Schema = mongoose.Schema;


//unique validator


//create new model with the same properties in TypeDefs (graphql schema)
let userSchema = new Schema({
    email: {
        type: String,
        unique: true, //unique validator

        //another way 
        // validate:{
        //     validator: email => User.doesnotExist({email}),
        //     message: ({value}) => `Email ${value} has already exist`
        // }
        
        
    },
    username: {
        type: String,
        unique: true
    },
    name: String,
    password: String
},
{
    // replacement for createAt or updateAt property.
    timestamps: true
})

userSchema.pre('save', async function(){
    if(this.isModified('password')){
         this.password =  await hash(this.password, 9)
    }
})

//unique validator
userSchema.plugin(uniqueValidator, { message: '{VALUE} has already exist.'})

//Another way to create unique validator
// userSchema.statics.doesnotExist = async (options) => {
//     return await this.where(options).countDocuments() === 0
// }

const User = mongoose.model('User',userSchema); 

_2bf‍.d(User);